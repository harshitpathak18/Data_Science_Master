* yield  #generator

* iter() #iterator

* next() 

* lambda operators:expression

* map(function,iterator)    # itertor can be list,tuple etc  return mapped values

* reduce(function,iterator) # return single value, normally used for applying cummulatively operations

* filter(function,iterator) # return only a filtered list of elements that satisfy a condition

* To create private method or variable use "__" in starting example: __variable or __method()

* Absctract class: use @abc.abstractclassmethod

                import abc

                class skill:
                    @abc.abstractclassmethod
                    def student_details(self):
                        pass
                        

* Decorators: it is used when we want to provide decoration on particular function for example- welcome and thanks message for every funtion

            def deco(function):
                def inner_deco():
                    print("Welcome")
                    function()
                    print("Thanks")
                return inner_deco

            @deco
            def function():
                print("Welcome To Data Science Master Course")

            function()

* Exception Handling--

   * try/except: catch the error and recover from exceptions hoist by programmers or Python itself.
   * try/finally: Whether exception occurs or not, it automatically performs the clean-up action.
   * assert: triggers an exception conditionally in the code.
   * raise: manually triggers an exception in the code.

SyntaxError: This exception is raised when the interpreter encounters a syntax error in the code, such as a misspelled keyword, a missing colon, or an unbalanced parenthesis.

TypeError: This exception is raised when an operation or function is applied to an object of the wrong type, such as adding a string to an integer.

NameError: This exception is raised when a variable or function name is not found in the current scope.
IndexError: This exception is raised when an index is out of range for a list, tuple, or other sequence type.

KeyError: This exception is raised when a key is not found in a dictionary.

ValueError: This exception is raised when a function or method is called with an invalid argument or input, such as trying to convert a string to an integer when the string does not represent a valid integer.

AttributeError: This exception is raised when an attribute or method is not found on an object, such as trying to access a non-existent attribute of a class instance.

IOError: This exception is raised when an I/O operation, such as reading or writing a file, fails due to an input/output error.

ZeroDivisionError: This exception is raised when an attempt is made to divide a number by zero.

ImportError: This exception is raised when an import statement fails to find or load a module.

